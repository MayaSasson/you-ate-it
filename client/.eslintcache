[{"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\index.tsx":"1","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\App.tsx":"3","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\youAteIt.tsx":"4","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\form\\form.tsx":"5","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\food-tab\\food-tab.tsx":"6","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\details-tab\\details-tab.tsx":"7","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\header\\header.tsx":"8","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\google-login\\googleLogIn.tsx":"9"},{"size":517,"mtime":1609618722903,"results":"10","hashOfConfig":"11"},{"size":440,"mtime":1609618722918,"results":"12","hashOfConfig":"11"},{"size":217,"mtime":1610018563092,"results":"13","hashOfConfig":"11"},{"size":839,"mtime":1610018592381,"results":"14","hashOfConfig":"11"},{"size":5323,"mtime":1610035691138,"results":"15","hashOfConfig":"11"},{"size":3568,"mtime":1610018583039,"results":"16","hashOfConfig":"11"},{"size":3102,"mtime":1610217206709,"results":"17","hashOfConfig":"11"},{"size":806,"mtime":1610018628229,"results":"18","hashOfConfig":"11"},{"size":1409,"mtime":1610018638453,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1mja6qh",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\index.tsx",[],["41","42"],"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\App.tsx",[],"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\youAteIt.tsx",[],"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\form\\form.tsx",["43"],"import React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AppBar , Tabs, Tab, Box} from '@material-ui/core';\r\nimport './style.scss'\r\nimport DetailsTab from '../details-tab/details-tab'\r\nimport FoodTab from '../food-tab/food-tab'\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={2}>\r\n          <>{children}</>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    backgroundColor: '#ababab',\r\n    width: '100%',\r\n    float: 'right',\r\n    height: '92%'\r\n  },\r\n}));\r\ninterface IProps {\r\n  email: any\r\n  logout: () => void\r\n}\r\n\r\nexport default function Form({email, logout}: IProps) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const [foodList, setFoodList] = React.useState([]);\r\n  const [beerList, setBeerList] = React.useState(0);\r\n  const [elseValue, setElseValue] = React.useState('');\r\n  const [selectedBeer, setSelectedBeer] = React.useState('');\r\n  const [privateDetails, setPrivateDetails] = React.useState({email: email, firstName:'', lastName:'', birthday:'', id:'', phone:''})\r\n\r\n  React.useEffect(() => {\r\n    bringBeerList()\r\n  }, []);\r\n\r\n  const getBeerList = async () => {\r\n    const response = await fetch('/beerList');\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n    return body;\r\n  };\r\n\r\n  const bringBeerList = async () =>{\r\n    getBeerList()\r\n      .then((res: any) => {\r\n        const beers = res.map((key: { beername: any; }) => key.beername);\r\n        setBeerList(beers)})\r\n          .catch((err: any) => console.log(err));\r\n  }\r\n\r\n  const bringFoodList = async () =>{\r\n    getfoodsList()\r\n      .then((res: any) => {\r\n        setFoodList(res)})\r\n          .catch((err: any) => console.log(err));\r\n  }\r\n\r\n  const getfoodsList = async () => {\r\n    const response = await fetch('/favoritFoodOptions');\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n    return body;\r\n  }\r\n\r\n  const insertNewFoodOptionToDB = async () => {\r\n    const data =  elseValue\r\n    await fetch('/favoritFoodOptions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  const insertUser = async () => {\r\n    const data =  {'email': email}\r\n\r\n    await fetch('/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n  \r\n  const insertPrivateDetails = async () => {\r\n    const data = {...privateDetails, email: email}\r\n    await fetch('/privateDetails', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  const insertfavoritFood = async (favoritFoodselected: any) => {\r\n    const filterSelectedFood = Object.fromEntries(Object.entries(favoritFoodselected).filter(([key, value]) => value === true))\r\n    var selectedFood = Object.keys(filterSelectedFood).map((key) => [email, key]);\r\n    const data = selectedFood\r\n    await fetch('/favoritFood', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  const insertFavoriteBeer = async () => {\r\n    const data = {email: email, favoriteFoodOrBeer: selectedBeer}\r\n    await fetch('/favoritBeer', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  const submit = async (favoritFoodselected: any) => {\r\n    elseValue!=='' && insertNewFoodOptionToDB()\r\n    insertUser()\r\n    insertPrivateDetails()\r\n    insertfavoritFood(favoritFoodselected)\r\n    selectedBeer !== '' && insertFavoriteBeer()\r\n    logout()\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"פרטים אישיים\" />\r\n          <Tab label=\"מאכלים אהובים\" />\r\n        </Tabs>\r\n      </AppBar>\r\n        <TabPanel value={value} index={0} >\r\n          <DetailsTab \r\n            setSelectedBeer = {setSelectedBeer}\r\n            onSubmit={()=>{\r\n              setValue(1)\r\n              bringFoodList()\r\n            }}\r\n            setPrivateDetails= {setPrivateDetails}\r\n            beerList = {beerList}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} >\r\n          <FoodTab \r\n            foodList = {foodList}\r\n            onSubmit={submit}\r\n            setElseValueMainForm={setElseValue}\r\n          />\r\n        </TabPanel>\r\n    </div>\r\n  );\r\n}","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\food-tab\\food-tab.tsx",["44"],"import React from 'react';\r\nimport {Checkbox, FormControlLabel, FormControl, TextField, Button} from '@material-ui/core';\r\nimport './style.scss'\r\n  interface IProps {\r\n    onSubmit: (favoritFoodselected: any) => void\r\n    foodList: any\r\n    setElseValueMainForm: (value: any) => void\r\n    // setFavoritFood: (favoriteFood: any) => void\r\n  }\r\n\r\n  export default function FoodTab({onSubmit, foodList, setElseValueMainForm, //setFavoritFood\r\n  }: IProps) {\r\n    const emptyFoodFormState:any = {else: false}\r\n    foodList.map((x: { key: string; }) => {\r\n      let val = x.key\r\n      emptyFoodFormState[val]=false\r\n      })\r\n  const [foodFormState, setFoodFormState] = React.useState(emptyFoodFormState)\r\n  const [elseValue, setElseValue] = React.useState('')\r\n  const [isFormValid, setIsFormValid] = React.useState(false)\r\n  const [showErrorMsg, setShowErrorMsg] = React.useState(false)\r\n\r\n  const updateFormStatus = () => {\r\n    setIsFormValid(true)\r\n    showErrorMsg && setShowErrorMsg(false)\r\n  }\r\n\r\n  const elseValueEntered = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n    if(foodFormState.else)\r\n    setElseValue(e.target.value)\r\n    const elseObject = {\"key\": e.target.value, \"value\": e.target.value}\r\n    setElseValueMainForm(elseObject)          \r\n  }\r\n  \r\n  const submit = () => {\r\n    if (isFormValid) {\r\n      let temp: any = {...foodFormState}\r\n      if (foodFormState.else) {\r\n        let tmpelseValue = elseValue\r\n        temp[tmpelseValue]=true  \r\n      }\r\n      delete temp.else;\r\n      onSubmit(temp)\r\n  } else {\r\n    setShowErrorMsg(true)\r\n  }\r\n}\r\n\r\n  const renderFavoriteFoodsTab = () => {\r\n    const options = foodList.map((option: { key: string; value: string}) => (\r\n      <FormControlLabel\r\n        key={option.key}\r\n        control={\r\n          <Checkbox \r\n            color=\"primary\" \r\n            value={foodFormState[option.key]} \r\n            onChange={() => {\r\n              setFoodFormState({...foodFormState, [option.key] : !foodFormState[option.key]})\r\n              !foodFormState[option.key] && !isFormValid && updateFormStatus()\r\n            }}\r\n          />\r\n        }\r\n        label={option.value}\r\n        labelPlacement=\"start\"\r\n      />\r\n    ));\r\n\r\n    return ( \r\n        <FormControl component=\"fieldset\" className='favoriteFoodForm'>\r\n            {options}\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox \r\n                  color=\"primary\" \r\n                  value={foodFormState.else} \r\n                  onChange={() => {\r\n                    setFoodFormState({...foodFormState, else: !foodFormState.else}); \r\n                  }}\r\n                />\r\n              }\r\n              label=\"אחר\"\r\n              labelPlacement=\"start\"\r\n            />\r\n            {foodFormState.else && <TextField \r\n              id=\"field\" \r\n              label=\"הקלד מאכל אחר\" \r\n              value={elseValue}\r\n              onChange={e => {\r\n                elseValueEntered(e)\r\n                foodFormState.else && elseValue!=='' && updateFormStatus()\r\n              }}\r\n            />}\r\n        </FormControl>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='form-container'>\r\n      <div className='subtitle'>אנה בחר את המאכלים האהובים עליך</div>\r\n      {renderFavoriteFoodsTab()}\r\n      {showErrorMsg && <div>please check at least one field</div>}\r\n      <Button \r\n        variant=\"contained\" \r\n        color=\"primary\" \r\n        onClick={isFormValid ? submit : () => setShowErrorMsg(true)}>סיום\r\n      </Button>\r\n    </div>\r\n  );\r\n}","C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\details-tab\\details-tab.tsx",[],"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\header\\header.tsx",[],"C:\\Users\\chenfr\\Desktop\\you-ate-it\\client\\src\\uAteIt\\google-login\\googleLogIn.tsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":59,"column":6,"nodeType":"51","endLine":59,"endColumn":8,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":14,"column":40,"nodeType":"55","messageId":"56","endLine":14,"endColumn":42},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'bringBeerList'. Either include it or remove the dependency array.","ArrayExpression",["59"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [bringBeerList]",{"range":"62","text":"63"},[1593,1595],"[bringBeerList]"]